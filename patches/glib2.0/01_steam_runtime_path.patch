diff -ruN glib2.0-2.32.3/gio/giomodule.c glib2.0-2.32.3.new/gio/giomodule.c
--- glib2.0-2.32.3/gio/giomodule.c	2013-02-03 21:19:19.000000000 -0800
+++ glib2.0-2.32.3.new/gio/giomodule.c	2013-02-03 21:33:27.321516379 -0800
@@ -874,6 +874,7 @@
 _g_io_modules_ensure_loaded (void)
 {
   static gboolean loaded_dirs = FALSE;
+  const gchar *steam_runtime;
   const char *module_path;
   GIOModuleScope *scope;
 
@@ -886,27 +887,45 @@
       loaded_dirs = TRUE;
       scope = g_io_module_scope_new (G_IO_MODULE_SCOPE_BLOCK_DUPLICATES);
 
-      /* First load any overrides, extras */
-      module_path = g_getenv ("GIO_EXTRA_MODULES");
-      if (module_path)
-	{
-	  gchar **paths;
-	  int i;
+      /* First load the steam runtime, if available */
+      steam_runtime = g_getenv ("STEAM_RUNTIME");
+      if (steam_runtime && *steam_runtime == '/')
+        {
+#if defined(__i386__)
+          const gchar *arch = "i386";
+#elif defined(__x86_64__)
+          const gchar *arch = "amd64";
+#else
+#error Unknown architecture
+#endif
+          gchar *steam_module_path = g_build_filename (steam_runtime, arch, GIO_MODULE_DIR, NULL);
+          g_io_modules_scan_all_in_directory_with_scope (steam_module_path, scope);
+          g_free (steam_module_path);
+        }
+      else
+        {
+          /* First load any overrides, extras */
+          module_path = g_getenv ("GIO_EXTRA_MODULES");
+          if (module_path)
+	    {
+	      gchar **paths;
+	      int i;
 
-	  paths = g_strsplit (module_path, G_SEARCHPATH_SEPARATOR_S, 0);
+	      paths = g_strsplit (module_path, G_SEARCHPATH_SEPARATOR_S, 0);
 
-	  for (i = 0; paths[i] != NULL; i++)
-	    {
-	      g_io_modules_scan_all_in_directory_with_scope (paths[i], scope);
-	    }
+	      for (i = 0; paths[i] != NULL; i++)
+	        {
+	          g_io_modules_scan_all_in_directory_with_scope (paths[i], scope);
+	        }
 
-	  g_strfreev (paths);
-	}
+	      g_strfreev (paths);
+	    }
 
-      /* Then load the compiled in path */
-      g_io_modules_scan_all_in_directory_with_scope (GIO_MODULE_DIR, scope);
-      /* Hard-coded fallback directory for pre-multiarch compatibility */
-      g_io_modules_scan_all_in_directory ("/usr/lib/gio/modules");
+          /* Then load the compiled in path */
+          g_io_modules_scan_all_in_directory_with_scope (GIO_MODULE_DIR, scope);
+          /* Hard-coded fallback directory for pre-multiarch compatibility */
+          g_io_modules_scan_all_in_directory ("/usr/lib/gio/modules");
+        }
 
       g_io_module_scope_free (scope);
 
